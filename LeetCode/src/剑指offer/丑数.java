package 剑指offer;
/**
 * 我们把只包含因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。
 * 
 * 	输入: n = 10
	输出: 12
	解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数
 * @author lqllq
 * 思想：uglyNum=2^x*3^y*5^z,这个是丑数生成的公式，任意一个丑数都是有前面的某个丑数乘以2或3或5得来的，所以我们可以推导出后面任意个丑数。但还需要为丑数
 * 		排序，所以，这里需要每次找到几种可能里面最小的那个丑数。所以公式为dp[0]=min(dp[p2]*2,dp[p3]*3,dp[p5]*5);
 */
public class 丑数 {
	// 一个十分巧妙的动态规划问题
    // 1.我们将前面求得的丑数记录下来，后面的丑数就是前面的丑数*2，*3，*5
    // 2.但是问题来了，我怎么确定已知前面k-1个丑数，我怎么确定第k个丑数呢
    // 3.采取用三个指针的方法，p2,p3,p5
    // 4.index2指向的数字下一次永远*2，p3指向的数字下一次永远*3，p5指向的数字永远*5
    // 5.我们从2*p2 3*p3 5*p5选取最小的一个数字，作为第k个丑数
    // 6.如果第K个丑数==2*p2，也就是说前面0-p2个丑数*2不可能产生比第K个丑数更大的丑数了，所以p2++
    // 7.p3,p5同理
    // 8.返回第n个丑数
	public static int nthUglyNumber(int n) {
		if(n<=0){
			return -1;
		}
		int[] dp=new int[n];
		int p2=0,p3=0,p5=0;
		dp[0]=1;
		for(int i=1;i<n;i++){
			dp[i]=Math.min(dp[p2]*2, Math.min(dp[p3]*3, dp[p5]*5));
			//这里不能用if else ，会存在重复，例如p2等于3时，p3恰好等于2，两个结果都是6，这个时候如果是if else那么只有一个数会++，下一次再算最小值
			//的时候吧，6又会出现一次。这是不对的，正确的做法应该是吧乘积相同的p都++;
			if(dp[i]==dp[p2]*2) p2++;
			if(dp[i]==dp[p3]*3) p3++;
			if(dp[i]==dp[p5]*5) p5++;
		}
		return dp[n-1];
    }
	public static void main(String[] args){
		System.out.print(nthUglyNumber(10));
	}
}
